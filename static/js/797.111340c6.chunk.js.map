{"version":3,"file":"static/js/797.111340c6.chunk.js","mappings":"sOAEaA,EAAgB,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QACvC,GAEMC,EAAAA,EAAAA,WAAS,GAFRC,GAAP,eAGA,GAAgCD,EAAAA,EAAAA,UAAS,IAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAA8CH,EAAAA,EAAAA,UAAS,IAAvD,eAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAAc,SAACC,GACnB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,WACHN,EAAYO,GACZ,MAEF,IAAK,kBACHL,EAAmBK,GACnB,MAEF,QACE,OAEL,EAKKC,EAAQ,mCAAG,WAAOC,GAAP,gFACfA,EAAMC,iBACAC,EAAOF,EAAMJ,cAFJ,SAGI,CAACO,MAAOD,EAAKE,SAASD,MAAML,MAAMO,cACnDf,SAAUY,EAAKE,SAASd,SAASQ,OAJpB,OAGTQ,EAHS,OAMfnB,EAAQmB,GACRpB,IAPe,2CAAH,sDAUd,OACA,kBAAMa,SAAUA,EAAUQ,aAAa,MAAvC,WACI,kBACEC,KAAK,QACLX,KAAK,QACLY,YAAY,QACZC,UAAQ,KAGV,kBACEF,KAAK,WACLV,MAAOR,EACPqB,SAAUjB,EACVG,KAAK,WACLY,YAAY,WACVC,UAAQ,KAGZ,kBACEF,KAAK,WACLV,MAAON,EACPmB,SAAUjB,EACVG,KAAK,kBACLY,YAAY,mBACZC,UAAQ,KAGV,mBAAQE,UAAWvB,EAAWmB,KAAK,SAAnC,oBAKL,E,8BCnEYK,EAAgB,SAAC,GAA2B,IAA1B3B,EAAyB,EAAzBA,SAAU4B,EAAe,EAAfA,UACjCC,GAAWC,EAAAA,EAAAA,MAkBjB,OACE,kBAAMjB,SAjBS,SAACC,GAChBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMJ,cAEnBmB,GACIE,EAAAA,EAAAA,KAAO,kBACJH,GADG,IAENjB,KAAMK,EAAKE,SAASP,KAAKC,MACzBoB,KAAMhB,EAAKE,SAASc,KAAKpB,MACzBqB,MAAOjB,EAAKE,SAASe,MAAMrB,UAI/BI,EAAKkB,OACN,EAG2Bb,aAAa,MAAvC,WACM,kBACEc,GAAG,OACHb,KAAK,OACLX,KAAK,OACLY,YAAY,OACZC,UAAQ,KAGV,kBACEW,GAAG,OACHb,KAAK,OACLX,KAAK,OACLY,YAAY,eACZC,UAAQ,KAGV,kBACEW,GAAG,QACHb,KAAK,MACLX,KAAK,QACLY,YAAY,eACZC,UAAQ,KAId,mBAAQF,KAAK,SAAb,2BACA,mBAAQc,QAASpC,EAAUsB,KAAK,SAAhC,oBAGL,EChDYe,EAAe,WAC1B,OAA0BnC,EAAAA,EAAAA,WAAS,GAAnC,eAAOoC,EAAP,KAAcC,EAAd,KACA,GAAkCrC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAO0B,EAAP,KAAkBY,EAAlB,KAEMC,EAAa,WACjBF,GAAUD,EACX,EAKD,OACA,8BAEGA,GAAQ,SAACvC,EAAD,CAAeE,QANL,SAACmB,GACpBoB,EAAapB,EACd,EAIgDpB,SAAUyC,KAAgB,SAACd,EAAD,CAAeC,UAAWA,EAAW5B,SAAUyC,KAG3H,C","sources":["components/RegisterForm/RegisterForm1/RegisterForm1.jsx","components/RegisterForm/RegisterForm2/RegisterForm2.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nexport const RegisterForm1 = ({onToggle, getData}) => {\n  const [formValid,\n    //  setFormValid\n    ] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  const inputChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'password':\n        setPassword(value);\n        break;\n      \n      case 'confirmPassword':\n        setConfirmPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  }\n  // if(password === confirmPassword){\n  //   setFormValid(true)\n  // }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const data = await {email: form.elements.email.value.toLowerCase(),\n      password: form.elements.password.value}\n    \n    getData(data)\n    onToggle()\n  };\n\n  return (\n  <form onSubmit={onSubmit} autoComplete=\"off\">\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        required\n      />\n\n      <input\n        type=\"password\"\n        value={password}\n        onChange={inputChange}\n        name=\"password\"\n        placeholder=\"Password\"\n          required\n        />\n\n      <input\n        type=\"password\"\n        value={confirmPassword}\n        onChange={inputChange}\n        name=\"confirmPassword\"\n        placeholder=\"Confirm Password\"\n        required\n      />\n\n      <button disabled={!formValid} type=\"submit\">\n        Next\n      </button>\n  </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { signUp } from \"../../../redux/auth/authOperations\";\n\nexport const RegisterForm2 = ({onToggle, dataForm1}) => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    dispatch(\n        signUp({\n        ...dataForm1,\n        name: form.elements.name.value,\n        city: form.elements.city.value,\n        phone: form.elements.phone.value,\n      })\n    );\n    \n    form.reset();\n  };\n\n  return (\n    <form onSubmit={onSubmit} autoComplete=\"off\">\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            required\n          />\n\n          <input\n            id=\"city\"\n            type=\"text\"\n            name=\"city\"\n            placeholder=\"City, Region\"\n            required\n          />\n\n          <input\n            id=\"phone\"\n            type=\"tel\"\n            name=\"phone\"\n            placeholder=\"Mobile Phone\"\n            required\n          />\n\n\n      <button type=\"submit\">Registration</button>\n      <button onClick={onToggle} type=\"button\">Back</button>\n    </form>\n  );\n};","import { RegisterForm1 } from \"../../components/RegisterForm/RegisterForm1/RegisterForm1\";\nimport { RegisterForm2 } from \"../../components/RegisterForm/RegisterForm2/RegisterForm2\";\n// import { Modal } from \"../../components/Modal/Modal\";\nimport { useState } from \"react\";\n\nexport const RegisterPage = () => {\n  const [Step1, setStep1] = useState(true);\n  const [dataForm1, setDataForm1] = useState({}) \n\n  const toggleForm = () => {\n    setStep1(!Step1)       \n  }\n\n  const getDataForm1 = (data) => {\n    setDataForm1(data)\n  }\n  return (\n  <>\n    {/* <Modal /> */}\n    {Step1 ? <RegisterForm1 getData={getDataForm1} onToggle={toggleForm}/> : <RegisterForm2 dataForm1={dataForm1} onToggle={toggleForm}/>}\n    </>\n  );\n};\n"],"names":["RegisterForm1","onToggle","getData","useState","formValid","password","setPassword","confirmPassword","setConfirmPassword","inputChange","e","currentTarget","name","value","onSubmit","event","preventDefault","form","email","elements","toLowerCase","data","autoComplete","type","placeholder","required","onChange","disabled","RegisterForm2","dataForm1","dispatch","useDispatch","signUp","city","phone","reset","id","onClick","RegisterPage","Step1","setStep1","setDataForm1","toggleForm"],"sourceRoot":""}