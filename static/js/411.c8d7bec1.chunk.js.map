{"version":3,"file":"static/js/411.c8d7bec1.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm1/RegisterForm1.styled.jsx","components/RegisterForm/RegisterForm1/RegisterForm1.tsx","components/RegisterForm/RegisterForm2/RegisterForm2.styled.jsx","components/RegisterForm/RegisterForm2/RegisterForm2.tsx","pages/RegisterPage/RegisterPage.styled.ts","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Input = styled.input`\nborder-radius: 40px;\nborder: 1px solid rgba(245, 146, 86, 0.5);\nbackground-color: rgba(253, 247, 242, 1);\noutline: none;\n\n@media (max-width: 767px) {\n    padding-top: 11px;\n    padding-right: 14px;\n    padding-bottom: 12px;\n    padding-left: 14px;\n    height: 40px;\n    width: 280px;\n    font-weight: 400;\n    font-size: 14px;  \n    line-height: 1.35;  \n}\n@media (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 32px;\n    padding-bottom: 13px;\n    padding-left: 32px;\n    height: 52;\n    width: 448px;\n    font-weight: 400;\n    font-size: 18px;  \n    line-height: 1.39;\n}\n\n`;\n\nexport const Button = styled.button`\nborder-radius: 40px;\nborder: 2px solid #F59256;\nbackground-color: #F59256;\ncolor: white;\ncursor: pointer;\n:disabled {\n    background-color: rgba(245,146,86,0.5);\n    border: none\n}\n\n@media (max-width: 767px) {\n    height: 44px;\n    width: 280px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;  \n    margin-bottom: 40px;\n    margin-top: 16px;\n\n};\n@media (min-width: 768px) {\n    height: 44px;\n    width: 458px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;\n    margin-bottom: 40px;\n};\n@media (min-width: 1280px) {\n    height: 48px;\n};\n`\nexport const InnerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n    padding: 40px 20px;\n@media (max-width: 767px) {\n    width: 95%;\n};\n@media (min-width: 768px) {\n    background-color: #FFF;\n    padding-top: 60px;\n    padding-right: 80px;\n    padding-bottom: 60px;\n    padding-left: 80px;\n    width: 608;\n    height: 583;\n    border-radius: 40px;\n}\n@media (min-width: 1280px) {\n    width: 618px;\n};\n\n`\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n`\nexport const Title = styled.h2`\n    margin-bottom: 13px;\n\n@media (max-width: 767px) {\n    font-weight: 700;\n    font-size: 24px;\n    line-height: 1.375;\n    \n};\n@media (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 1.36;\n};\n\n`\nexport const Div = styled.div`\nposition: relative;\n@media (max-width: 767px) { \n    margin-bottom: 24px;\n};\n@media (min-width: 768px) { \n    margin-bottom: 40px;\n};\n`\nexport const Notification = styled.span`\nposition: absolute;\nfont-size: 12px;\nleft: 20px;\nbottom: -40%;\n`\nexport const Google = styled.a`\n margin-bottom: 13px;\n height: 24px\n\n`\nexport const Eye = styled.span`\n    position: absolute;\n    right: 15px;\n    top: 55%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    color: #F59256;\n\n    @media (min-width: 768px) {\n        right: 20px;  \n    }\n`\nexport const Text = styled.p`\n  color: ${props => props.theme.colors.greyText};\n\n`\nexport const Link = styled(NavLink)`\n  color: ${props => props.theme.colors.blue};\n  text-decoration: underline;\n`\n\n","import { useTranslation } from 'react-i18next';\nimport { IFormOneData } from '../../../pages/RegisterPage/RegisterPage';\nimport * as SC from './RegisterForm1.styled';\nimport { useInput } from '../../../hooks/useInput';\nimport { FcGoogle } from 'react-icons/fc'\nimport { useState } from 'react';\nimport { HiEye, HiEyeOff } from 'react-icons/hi'\n\n\ninterface IProps {\n  onToggle: () => void;\n  getData: (data: IFormOneData) => void;\n}\n\nexport const RegisterForm1 = ({ onToggle, getData }: IProps) => {\n\n  const { t } = useTranslation();\n  const[passwordType, setPasswordType] = useState('password')\n  const[confirmPasswordType, setConfirmPasswordType] = useState('password')\n  \n  const email = useInput('', { isEmail: true });\n  const password = useInput('', { isPassword: true });\n  const confirmPassword = useInput('', { isSamePassword: password.value });\n\n  const onNextForm = () => {\n    getData({ email: email.value, password: password.value });\n    onToggle();\n  };\n\n  return (\n    <SC.InnerDiv>\n      <SC.Title>{t('Registration')}</SC.Title>\n      <SC.Google href=\"https://your-pets.onrender.com/api/users/google\"> <FcGoogle style={{width: \"1.5em\", height: \"1.5em\" }}/></SC.Google> \n      <SC.Div>\n        <SC.Input\n          style={{\n            border:\n              ((email.isDirty &&\n                !email.emailError &&\n                '1px solid green') as string) ||\n              ((email.isDirty &&\n                email.emailError &&\n                '1px solid red') as string),\n          }}\n          type=\"email\"\n          value={email.value}\n          onChange={e => email.onChange(e)}\n          onBlur={e => email.onBlur(e)}\n          name=\"email\"\n          placeholder={t('Email')!}\n          required\n        />\n        {(email.isDirty && email.emailError && (\n          <SC.Notification style={{ color: 'red' }}>\n            {t('Enter a valid Email')}\n          </SC.Notification>\n        )) ||\n          (email.isDirty && !email.emailError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('Email is correct')}\n            </SC.Notification>\n          ))}\n      </SC.Div>\n      <SC.Div>\n        <SC.Input\n          style={{\n            border:\n              ((password.isDirty &&\n                !password.passwordError &&\n                '1px solid green') as string) ||\n              ((password.isDirty &&\n                password.passwordError &&\n                '1px solid red') as string),\n          }}\n          type={passwordType}\n          value={password.value}\n          onChange={e => password.onChange(e)}\n          onBlur={e => password.onBlur(e)}\n          name=\"password\"\n          placeholder={t('Password')!}\n          required\n        />\n        {password.isDirty && password.passwordError && (\n          <SC.Notification style={{ color: 'red' }}>\n            {t('Enter a valid Password')}\n          </SC.Notification>\n        )}\n        {password.isDirty && !password.passwordError && (\n          <SC.Notification style={{ color: 'green' }}>\n            {t('Password is correct')}\n          </SC.Notification>\n        )}\n        <SC.Eye onClick={() => {passwordType === 'password' ? setPasswordType('text') : setPasswordType('password')}}>{passwordType === 'password' ? <HiEye/> : <HiEyeOff/>}</SC.Eye>\n      </SC.Div>\n      <SC.Div>\n        <SC.Input\n          style={{\n            border:\n              ((confirmPassword.isDirty &&\n                password.value === confirmPassword.value &&\n                '1px solid green') as string) ||\n              ((confirmPassword.isDirty &&\n                password.value !== confirmPassword.value &&\n                '1px solid red') as string),\n          }}\n          type={confirmPasswordType}\n          value={confirmPassword.value}\n          onChange={e => confirmPassword.onChange(e)}\n          onBlur={e => confirmPassword.onBlur(e)}\n          name=\"confirmPassword\"\n          placeholder={t('Confirm Password')!}\n          required\n        />\n        {confirmPassword.isDirty &&\n          password.value === confirmPassword.value && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('confirmPassword is correct')}\n            </SC.Notification>\n          )}\n        {confirmPassword.isDirty &&\n          password.value !== confirmPassword.value && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('confirmPassword is not correct')}\n            </SC.Notification>\n          )}\n        <SC.Eye onClick={()=> {confirmPasswordType === 'password' ? setConfirmPasswordType('text') : setConfirmPasswordType('password')}}>{confirmPasswordType === 'password' ? <HiEye/> : <HiEyeOff/>}</SC.Eye>\n      </SC.Div>\n      <SC.Button\n        disabled={!confirmPassword.confirmError}\n        type=\"button\"\n        onClick={onNextForm}\n      >\n        {t('Next')}\n      </SC.Button>\n      <SC.Text>\n        {t('Already have an account')}? <SC.Link to=\"/login\">{t('Login')}</SC.Link>\n      </SC.Text>\n    </SC.InnerDiv>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Input = styled.input`\nborder-radius: 40px;\nborder: 1px solid rgba(245, 146, 86, 0.5);\nbackground-color: rgba(253, 247, 242, 1);\noutline: none;\n\n\n@media (max-width: 767px) {\n    padding-top: 11px;\n    padding-right: 14px;\n    padding-bottom: 12px;\n    padding-left: 14px;\n    height: 40px;\n    width: 280px;\n    font-weight: 400;\n    font-size: 14px;  \n    line-height: 1.35;  \n}\n@media (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 32px;\n    padding-bottom: 13px;\n    padding-left: 32px;\n    height: 52;\n    width: 448px;\n    font-weight: 400;\n    font-size: 18px;  \n    line-height: 1.39;\n}\n\n`\nexport const Button1 = styled.button`\nborder-radius: 40px;\nborder: 2px solid #F59256;\nbackground-color: #F59256;\ncolor: white;\ncursor: pointer;\n:disabled {\n    background-color: rgba(245,146,86,0.5);\n    border: none\n}\n\n@media (max-width: 767px) {\n    height: 44px;\n    width: 280px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;  \n    margin-bottom: 12px;\n    margin-top: 16px;\n};\n@media (min-width: 768px) {\n    height: 44px;\n    width: 458px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;\n    margin-bottom: 16px;\n};\n@media (min-width: 1280px) {\n    height: 48px;\n};\n`\nexport const Button2 = styled.button`\nborder-radius: 40px;\nborder: 2px solid #F59256;\nbackground-color: #F59256;\ncolor: white;\ncursor: pointer;\n\n\n@media (max-width: 767px) {\n    height: 44px;\n    width: 280px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;  \n    margin-bottom: 40px;\n    margin-top: 16px;\n};\n@media (min-width: 768px) {\n    height: 44px;\n    width: 458px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;\n    margin-bottom: 40px;\n};\n@media (min-width: 1280px) {\n    height: 48px;\n};\n`\n\nexport const InnerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n    padding: 40px 20px;\n@media (max-width: 767px) {\n    width: 95%;\n    /* height: 100vh */\n};\n@media (min-width: 768px) {\n    background-color: #FFF;\n    padding-top: 60px;\n    padding-right: 80px;\n    padding-bottom: 60px;\n    padding-left: 80px;\n    width: 608px;\n    height: 643px;\n    border-radius: 40px;\n}\n@media (min-width: 1280px) {\n    width: 618px;\n    height: 667px;\n};\n\n`\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n`\nexport const Title = styled.h2`\n    margin-bottom: 40px;\n\n@media (max-width: 767px) {\n    font-weight: 700;\n    font-size: 24px;\n    line-height: 1.375;\n    \n};\n@media (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 1.36;\n};\n`\nexport const Div = styled.div`\nposition: relative;\n@media (max-width: 767px) { \n    margin-bottom: 24px;\n};\n@media (min-width: 768px) { \n    margin-bottom: 40px;\n};\n`\nexport const Notification = styled.span`\nposition: absolute;\nfont-size: 12px;\nleft: 20px;\nbottom: -40%;\n`\nexport const Text = styled.p`\n  color: ${props => props.theme.colors.greyText};\n\n`\nexport const Link = styled(NavLink)`\n  color: ${props => props.theme.colors.blue};\n  text-decoration: underline;\n`\n\n\n\n","import { FormEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@reduxjs/toolkit';\nimport { AnyAction } from 'redux';\nimport { signUp } from '../../../redux/auth/authOperations';\nimport { useTranslation } from 'react-i18next';\nimport { IFormOneData } from '../../../pages/RegisterPage/RegisterPage';\nimport { ICredentials } from '../../../helpers/interfaces/auth/authInterfaces';\nimport * as SC from './RegisterForm2.styled';\nimport { useInput } from '../../../hooks/useInput';\n\ninterface IProps {\n  onToggle: () => void;\n  dataForm1: IFormOneData | {};\n}\n\nexport const RegisterForm2 = ({ onToggle, dataForm1 }: IProps) => {\n  const dispatch = useDispatch<ThunkDispatch<any, any, AnyAction>>();\n  const { t } = useTranslation();\n  const name = useInput('', { isName: true });\n  const city = useInput('', { isCity: true });\n  const phone = useInput('', {isPhone: true});\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    const payload: ICredentials = {\n      ...(dataForm1 as {\n        email: string;\n        password: string;\n      }),\n      name: name.value,\n      city: city.value,\n      phone: phone.value,\n    };\n\n    dispatch(signUp(payload));\n    form.reset();\n  };\n\n  return (\n    <SC.InnerDiv>\n      <SC.Title>{t('Registration')}</SC.Title>\n      <SC.Form onSubmit={onSubmit} autoComplete=\"off\">\n        <SC.Div>\n          <SC.Input\n            style={{\n              border:\n                ((name.isDirty &&\n                  !name.nameError &&\n                  '1px solid green') as string) ||\n                ((name.isDirty &&\n                  name.nameError &&\n                  '1px solid red') as string),\n            }}\n            onChange={e => name.onChange(e)}\n            onBlur={e => name.onBlur(e)}\n            value={name.value}\n            type=\"text\"\n            name=\"name\"\n            placeholder={t('Name')!}\n            required\n          />\n          {name.isDirty && name.nameError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter your name pls')}\n            </SC.Notification>\n          )}\n          {name.isDirty && !name.nameError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('Name is valid')}\n            </SC.Notification>\n          )}\n        </SC.Div>\n        <SC.Div>\n          <SC.Input\n            style={{\n              border:\n                ((city.isDirty &&\n                  !city.cityError &&\n                  '1px solid green') as string) ||\n                ((city.isDirty &&\n                  city.cityError &&\n                  '1px solid red') as string),\n            }}\n            onChange={e => city.onChange(e)}\n            onBlur={e => city.onBlur(e)}\n            value={city.value}\n            type=\"text\"\n            name=\"city\"\n            placeholder={t('City, Region')!}\n            required\n          />\n          {city.isDirty && city.cityError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter your city pls')}\n            </SC.Notification>\n          )}\n          {city.isDirty && !city.cityError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('City is valid')}\n            </SC.Notification>\n          )}\n        </SC.Div>\n        <SC.Div>\n          <SC.Input\n            style={{\n              border:\n                ((phone.isDirty &&\n                  !phone.PhoneError &&\n                  '1px solid green') as string) ||\n                ((phone.isDirty &&\n                  phone.PhoneError &&\n                  '1px solid red') as string),\n            }}\n            onChange={e => phone.onChange(e)}\n            onBlur={e => phone.onBlur(e)}\n            value={phone.value}\n            type=\"tel\"\n            name=\"phone\"\n            placeholder={t('Mobile Phone +380...')!}\n            required\n          />\n          {phone.isDirty && phone.PhoneError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter your phone pls')}\n            </SC.Notification>\n          )}\n          {phone.isDirty && !phone.PhoneError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('Phone is valid')}\n            </SC.Notification>\n          )}\n        </SC.Div>\n\n        <SC.Button1\n          disabled={\n            name.nameError || city.cityError || phone.PhoneError\n          }\n          type=\"submit\"\n        >\n          {t('Registration')}\n        </SC.Button1>\n        <SC.Button2 onClick={onToggle} type=\"button\">\n          {t('Back')}\n        </SC.Button2>\n      </SC.Form>\n       <SC.Text>\n        {t('Already have an account')}? <SC.Link to=\"/login\">{t('Login')}</SC.Link>\n      </SC.Text>\n    </SC.InnerDiv>\n  );\n};\n","import styled from 'styled-components';\n\nimport loginBGM from '../../helpers/photos/authBgM.png';\nimport loginBgT from '../../helpers/photos/authBgT.png';\nimport loginBgD from '../../helpers/photos/authBgD.png';\n\nexport const Main = styled.div`\n height: 100%;\n display:flex;\n justify-content:center;\n align-items:center;\n  @media screen and (max-width: 767px) {\n    height: 600px;\n    background: url(${loginBGM});\n    background-size: 500px auto;\n    background-position: bottom -50px left 0px;\n    background-repeat: no-repeat;\n  }\n  @media screen and (min-width: 768px) and (max-width: 1279px) {\n    height: 1100px;\n    background: url(${loginBgT});\n    background-size: 768px auto;\n    background-position: bottom 0px left 0px;\n    background-repeat: no-repeat;\n  }\n  @media screen and (min-width: 1280px) {\n    height: 100vh;\n    background-image: url(${loginBgD});\n    background-position: bottom 0px left 0px;\n    background-size: 1240px, contain;\n    background-repeat: no-repeat;\n  }\n\n`","import { RegisterForm1 } from '../../components/RegisterForm/RegisterForm1/RegisterForm1';\nimport { RegisterForm2 } from '../../components/RegisterForm/RegisterForm2/RegisterForm2';\nimport { useState } from 'react';\nimport * as SC from './RegisterPage.styled';\n\nexport interface IFormOneData {\n  email: string;\n  password: string;\n}\n\nexport const RegisterPage = () => {\n  const [Step1, setStep1] = useState<boolean>(true);\n  const [dataForm1, setDataForm1] = useState<IFormOneData | {}>({});\n\n  const toggleForm = () => {\n    setStep1(!Step1);\n  };\n\n  const getDataForm1 = (data: IFormOneData) => {\n    setDataForm1(data);\n  };\n  return (\n    <SC.Main>\n      {Step1 ? (\n        <RegisterForm1 getData={getDataForm1} onToggle={toggleForm} />\n      ) : (\n        <RegisterForm2 dataForm1={dataForm1} onToggle={toggleForm} />\n      )}\n    </SC.Main>\n  );\n};\n"],"names":["Input","styled","Button","InnerDiv","Title","Div","Notification","Google","Eye","Text","props","theme","colors","greyText","Link","NavLink","blue","RegisterForm1","onToggle","getData","t","useTranslation","useState","passwordType","setPasswordType","confirmPasswordType","setConfirmPasswordType","email","useInput","isEmail","password","isPassword","confirmPassword","isSamePassword","value","href","style","width","height","border","isDirty","emailError","type","onChange","e","onBlur","name","placeholder","required","color","passwordError","onClick","disabled","confirmError","to","Button1","Button2","Form","RegisterForm2","dataForm1","dispatch","useDispatch","isName","city","isCity","phone","isPhone","onSubmit","event","preventDefault","form","currentTarget","payload","signUp","reset","autoComplete","nameError","cityError","PhoneError","Main","loginBGM","loginBgT","loginBgD","RegisterPage","Step1","setStep1","setDataForm1","toggleForm","data"],"sourceRoot":""}