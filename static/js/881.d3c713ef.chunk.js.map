{"version":3,"file":"static/js/881.d3c713ef.chunk.js","mappings":"uLAOaA,EAAW,SAACC,EAAsBC,GAC7C,OAA0BC,EAAAA,EAAAA,UAASF,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,ECJqB,SAACJ,EAAeF,GAC3C,OAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOM,EAAP,KAAuBC,EAAvB,KACA,GAAoCP,EAAAA,EAAAA,WAAS,GAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAAuCT,EAAAA,EAAAA,WAAS,GAAhD,eAAOU,EAAP,KAAqBC,EAArB,KACA,GAAoCX,EAAAA,EAAAA,WAAS,GAA7C,eAAOY,EAAP,KAAmBC,EAAnB,KACA,GAAkCb,EAAAA,EAAAA,WAAS,GAA3C,eAAOc,EAAP,KAAkBC,EAAlB,KACA,GAAkCf,EAAAA,EAAAA,WAAS,GAA3C,eAAOgB,EAAP,KAAkBC,EAAlB,KACA,GAA0CjB,EAAAA,EAAAA,WAAS,GAAnD,eAAOkB,EAAP,KAAsBC,EAAtB,KAoDA,OAlDAC,EAAAA,EAAAA,YAAU,WACR,IAAK,IAAMC,KAActB,EACvB,OAAQsB,GACN,IAAK,YACHpB,EAAMqB,OAAUvB,EAAYsB,GACxBd,GAAkB,GAClBA,GAAkB,GACtB,MACF,IAAK,UAED,yJACOgB,KAAKC,OAAOvB,GAAOwB,eACxBhB,GAAc,GACdA,GAAc,GAClB,MACF,IAAK,iBACHR,IAAUF,EAAYsB,IAAyB,KAAVpB,EACjCU,GAAe,GACfA,GAAe,GACnB,MACF,IAAK,UACa,oBACRY,KAAKC,OAAOvB,GAAOwB,eACzBZ,GAAc,GACdA,GAAc,GAChB,MACF,IAAK,SACY,irPACRU,KAAKC,OAAOvB,GAAOwB,eACxBV,GAAa,GACbA,GAAa,GACf,MACF,IAAK,SACY,8/eACRQ,KAAKC,OAAOvB,GAAOwB,eACxBR,GAAa,GACbA,GAAa,GACf,MACF,IAAK,aACgB,sBACRM,KAAKC,OAAOvB,GAAOwB,eAC5BN,GAAiB,GACjBA,GAAiB,GACnB,MACF,QACEO,QAAQC,IAAI,sGAGnB,GAAE,CAAC1B,EAAOF,IAEJ,CACLO,eAAAA,EACAE,WAAAA,EACAE,aAAAA,EACAE,WAAAA,EACAE,UAAAA,EACAE,UAAAA,EACAE,cAAAA,EAEH,CDhEeU,CAAc3B,EAAOF,GAenC,OAAO,QACLE,MAAAA,EACA4B,SAfe,SAACC,GAChB5B,EAAS4B,EAAEC,OAAO9B,MACnB,EAcC+B,OAZa,SAACF,GACd1B,GAAW,EACZ,EAWCD,QAAAA,GACGE,EAEN,C","sources":["hooks/useInput.ts","hooks/useValidation.ts"],"sourcesContent":["import { useValidation } from './useValidation';\nimport { useState } from 'react';\n\ninterface ISetings {\n  [key: string]: boolean | number | string;\n}\n\nexport const useInput = (initialValue: string, validations: ISetings) => {\n  const [value, setValue] = useState(initialValue);\n  const [isDirty, setIsDirty] = useState(false);\n  const valid = useValidation(value, validations);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n  }\n  // useEffect(() => {\n  //   if (value === '') {\n  //     setIsDirty(false);\n  //   } else setIsDirty(true);\n  // }, [value]);\n\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid,\n  };\n};\n","import { useEffect, useState } from 'react';\n\ninterface ISetings {\n  [key: string]: boolean | number | string;\n}\n\nexport const useValidation = (value: string, validations: ISetings) => {\n  const [minLengthError, setMinLengthError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [confirmError, isConfirmError] = useState(false);\n  const [PhoneError, setPhoneError] = useState(false);\n  const [nameError, setNameError] = useState(false)\n  const [cityError, setCityError] = useState(false)\n  const [passwordError, setPasswordError] = useState(false)\n\n  useEffect(() => {\n    for (const validation in validations) {\n      switch (validation) {\n        case 'minLength':\n          value.length < (validations[validation] as number)\n            ? setMinLengthError(true)\n            : setMinLengthError(false);\n          break;\n        case 'isEmail':\n          const reMail =\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            reMail.test(String(value).toLowerCase())\n            ? setEmailError(false)\n            : setEmailError(true);\n          break;\n        case 'isSamePassword':\n          value === validations[validation] && value !== ''\n            ? isConfirmError(true)\n            : isConfirmError(false);\n          break;\n        case 'isPhone':\n          const rePhone = /^(\\+38)[0-9]{10}$/\n          rePhone.test(String(value).toLowerCase())\n          ? setPhoneError(false)\n          : setPhoneError(true);\n          break;\n        case 'isName':\n          const reName = /^\\p{L}+$/u\n          reName.test(String(value).toLowerCase())\n          ? setNameError(false)\n          : setNameError(true);\n          break\n        case 'isCity':\n          const reCity = /^[\\p{L}\\s]+,[\\s]*[\\p{L}\\s]+$/u\n          reCity.test(String(value).toLowerCase())\n          ? setCityError(false)\n          : setCityError(true);\n          break\n        case 'isPassword':\n          const rePassword = /^(?=.*)[^\\s]{7,32}$/ \n          rePassword.test(String(value).toLowerCase())\n          ? setPasswordError(false)\n          : setPasswordError(true);\n          break\n        default:\n          console.log('нет такой проверки');\n      }\n    }\n  }, [value, validations]);\n\n  return {\n    minLengthError,\n    emailError,\n    confirmError,\n    PhoneError,\n    nameError,\n    cityError,\n    passwordError\n  };\n};\n"],"names":["useInput","initialValue","validations","useState","value","setValue","isDirty","setIsDirty","valid","minLengthError","setMinLengthError","emailError","setEmailError","confirmError","isConfirmError","PhoneError","setPhoneError","nameError","setNameError","cityError","setCityError","passwordError","setPasswordError","useEffect","validation","length","test","String","toLowerCase","console","log","useValidation","onChange","e","target","onBlur"],"sourceRoot":""}