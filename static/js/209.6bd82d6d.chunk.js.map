{"version":3,"file":"static/js/209.6bd82d6d.chunk.js","mappings":"uNAOaA,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,IACnC,IAAKD,EACH,OAAOC,EAET,IAAMC,EAAS,IAAIC,OAAOH,EAAQ,MAC5BI,EAAaH,EAAII,MAAMH,GAC7B,OAAIE,EACKH,EAAIK,MAAMJ,GAAQK,KAAI,SAACC,EAAIC,EAAKC,GACrC,GAAID,EAAMC,EAAIC,OAAS,EAAG,CACxB,IAAMC,EAAUR,EAAWS,QAC3B,OACE,UAAC,EAAAC,SAAD,WACGN,EADH,KACO,iBAAMO,MAAO,CAAEC,gBAAiB,UAAhC,SAA6CJ,MADrCH,EAIlB,CACD,OAAOD,CACR,IAEIP,CACR,E,UCpBYgB,EAAW,WACtB,IAAQC,GAAMC,EAAAA,EAAAA,MAAND,EACR,GAA0BE,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,GAA6BC,EAAAA,EAAAA,GAC3B,CAAEF,KAAAA,EAAMC,QAAAA,GACR,CACEE,2BAA2B,IAHvBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAORC,GAAcC,EAAAA,EAAAA,cAClB,SAAC3B,GACC,OAAO,SAACF,EAAD,CAAYC,OAAQsB,EAASrB,IAAKA,GAC1C,GACD,CAACqB,IAGH,OACE,gCACGI,IAAc,SAACG,EAAA,EAAD,KACf,+BACGJ,QADH,IACGA,OADH,EACGA,EAAMlB,KAAI,gBAAGuB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,IAAKC,EAAxC,EAAwCA,IAAxC,OACT,2BACE,wBACGR,EAAaG,EAAK,GAASA,EAAK,GAASA,EAAK,OAEjD,gBAAKM,IAAKD,EAAKE,IAAKP,EAAK,GAASA,EAAK,GAASA,EAAK,MACrD,uBACGH,EACEK,EAAW,GACRA,EAAW,GACXA,EAAW,OAGnB,cAAGM,KAAML,EAAMM,OAAO,SAASC,IAAI,sBAAnC,SACGtB,EAAE,gBAEL,uBAAIa,MAfGG,EADA,QAsBlB,E,8BC7CYO,EAAY,WACvB,OAA2CrB,EAAAA,EAAAA,KAAnCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASoB,EAAvB,EAAuBA,gBACvB,GAA0BC,EAAAA,EAAAA,UAASrB,GAAnC,eAAOsB,EAAP,KAAcC,EAAd,KAEMC,GAA2BC,EAAAA,EAAAA,UAAQ,WACvC,OAAOC,EAAAA,EAAAA,IACL,SAACC,GAAD,OAAmBP,EAAgB,CAAErB,KAAAA,EAAM6B,IAAKD,GAAhD,GACA,IAEH,GAAE,CAACP,EAAiBrB,IAQrB,OACE,iCACE,kBAAO8B,KAAK,OAAOF,MAAOL,EAAOQ,SARV,SAACC,GAC1B,IAAQJ,EAAUI,EAAId,OAAdU,MACRJ,EAASI,GACTH,EAAyBG,EAC1B,KAKG,0BAAM,SAAC,MAAD,CAAcK,KAAM,SAG/B,ECxBYC,EAAW,WACtB,IAAQrC,GAAMC,EAAAA,EAAAA,MAAND,EACR,OACE,iCACE,wBAAKA,EAAE,WACP,SAACuB,EAAD,KACA,SAACxB,EAAD,MAGL,C","sources":["components/Hightlight/Hightlight.tsx","pages/NewsPage/NewsList/NewsList.tsx","components/SearchBar/SearchBar.tsx","pages/NewsPage/NewsPage.tsx"],"sourcesContent":["import { Fragment } from 'react';\n\ninterface IHighlate {\n  filter: string;\n  str: string;\n}\n\nexport const Hightlight = ({ filter, str }: IHighlate): any => {\n  if (!filter) {\n    return str;\n  }\n  const regExp = new RegExp(filter, 'ig');\n  const matchValue = str.match(regExp);\n  if (matchValue) {\n    return str.split(regExp).map((el, idx, arr) => {\n      if (idx < arr.length - 1) {\n        const matches = matchValue.shift();\n        return (\n          <Fragment key={idx}>\n            {el} <span style={{ backgroundColor: 'yellow' }}>{matches}</span>\n          </Fragment>\n        );\n      }\n      return el;\n    });\n  }\n  return str;\n};\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFetchNewsQuery } from '../../../redux/news/newsOperations';\nimport { useGetSearchParams } from '../../../huks/useGetSearchParams';\nimport { Hightlight } from '../../../components/Hightlight/Hightlight';\nimport { Loader } from '../../../components/Loader/Loader';\n\nexport const NewsList = () => {\n  const { t } = useTranslation();\n  const { lang, keyword } = useGetSearchParams();\n  const { data, isFetching } = useFetchNewsQuery(\n    { lang, keyword },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const ChangeColor = useCallback(\n    (str: string) => {\n      return <Hightlight filter={keyword} str={str} />;\n    },\n    [keyword]\n  );\n\n  return (\n    <>\n      {isFetching && <Loader />}\n      <ul>\n        {data?.map(({ title, date, description, link, _id, img }) => (\n          <li key={_id}>\n            <h3>\n              {ChangeColor((title['en'] ? title['en'] : title['ua']) as string)}\n            </h3>\n            <img src={img} alt={title['en'] ? title['en'] : title['ua']} />\n            <p>\n              {ChangeColor(\n                (description['en']\n                  ? description['en']\n                  : description['ua']) as string\n              )}\n            </p>\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n              {t('Read more')}\n            </a>\n            <p>{date}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { ChangeEvent, useState, useMemo } from 'react';\nimport { debounce } from 'ts-debounce';\nimport { GrFormSearch } from 'react-icons/gr';\nimport { useGetSearchParams } from '../../huks/useGetSearchParams';\n\nexport const SearchBar = () => {\n  const { lang, keyword, setSearchParams } = useGetSearchParams();\n  const [query, setQuery] = useState(keyword);\n\n  const handleSearchParamsChange = useMemo(() => {\n    return debounce(\n      (value: string) => setSearchParams({ lang, key: value }),\n      500\n    );\n  }, [setSearchParams, lang]);\n\n  const handleFilterChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value } = evt.target as HTMLInputElement;\n    setQuery(value);\n    handleSearchParamsChange(value);\n  };\n\n  return (\n    <>\n      <input type=\"text\" value={query} onChange={handleFilterChange} />\n      <div>{<GrFormSearch size={24} />}</div>\n    </>\n  );\n};\n","import { NewsList } from './NewsList/NewsList';\nimport { SearchBar } from '../../components/SearchBar/SearchBar';\nimport { useTranslation } from 'react-i18next';\n\nexport const NewsPage = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <h2>{t('News')}</h2>\n      <SearchBar />\n      <NewsList />\n    </>\n  );\n};\n"],"names":["Hightlight","filter","str","regExp","RegExp","matchValue","match","split","map","el","idx","arr","length","matches","shift","Fragment","style","backgroundColor","NewsList","t","useTranslation","useGetSearchParams","lang","keyword","useFetchNewsQuery","refetchOnMountOrArgChange","data","isFetching","ChangeColor","useCallback","Loader","title","date","description","link","_id","img","src","alt","href","target","rel","SearchBar","setSearchParams","useState","query","setQuery","handleSearchParamsChange","useMemo","debounce","value","key","type","onChange","evt","size","NewsPage"],"sourceRoot":""}