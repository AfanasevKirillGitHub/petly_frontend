{"version":3,"file":"static/js/839.5f09a618.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.ts","components/LoginForm/LoginForm.tsx","pages/LoginPage/LoginPage.styled.tsx","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Input = styled.input`\nborder-radius: 40px;\nborder: 1px solid rgba(245, 146, 86, 0.5);\nbackground-color: rgba(253, 247, 242, 1);\noutline: none;\n@media (max-width: 767px) {\n    padding-top: 11px;\n    padding-right: 14px;\n    padding-bottom: 12px;\n    padding-left: 14px;\n    height: 40px;\n    width: 280px;\n    font-weight: 400;\n    font-size: 14px;  \n    line-height: 1.35;  \n}\n@media (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 32px;\n    padding-bottom: 13px;\n    padding-left: 32px;\n    height: 52;\n    width: 448px;\n    font-weight: 400;\n    font-size: 18px;  \n    line-height: 1.39;\n}\n\n`;\nexport const Button = styled.button`\nborder-radius: 40px;\nborder: 2px solid #F59256;\nbackground-color: #F59256;\ncolor: white;\ncursor: pointer;\n\n@media (max-width: 767px) {\n    height: 44px;\n    width: 280px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;  \n    margin-bottom: 40px;\n    margin-top: 16px;\n};\n@media (min-width: 768px) {\n    height: 44px;\n    width: 458px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;\n    margin-bottom: 40px;\n};\n@media (min-width: 1280px) {\n    height: 48px;\n};\n`\nexport const InnerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n    padding: 40px 20px;\n\n@media (max-width: 767px) {\n    width: 95%;\n};\n@media (min-width: 768px) {\n    background-color: #FFF;\n    padding-top: 60px;\n    padding-right: 80px;\n    padding-bottom: 60px;\n    padding-left: 80px;\n    width: 608px;\n    height: 492px;\n    border-radius: 40px;\n}\n@media (min-width: 1280px) {\n    width: 618px;\n    height: 496px;\n};\n\n`\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n`\nexport const Title = styled.h2`\nmargin-bottom: 13px;\n\n@media (max-width: 767px) {\n    font-weight: 700;\n    font-size: 24px;\n    line-height: 1.375;\n    \n};\n@media (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 1.36;\n};\n\n`\nexport const Div = styled.div`\nposition: relative;\n@media (max-width: 767px) { \n    margin-bottom: 24px;\n};\n@media (min-width: 768px) { \n    margin-bottom: 40px;\n};\n`\nexport const Notification = styled.span`\nposition: absolute;\nfont-size: 12px;\nleft: 20px;\nbottom: -40%;\n`\nexport const Google = styled.a`\n margin-bottom: 13px;\n height: 24px\n\n`\nexport const Eye = styled.span`\n    position: absolute;\n    right: 15px;\n    top: 55%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    color: #F59256;\n\n    @media (min-width: 768px) {\n        right: 20px;  \n    }\n`\nexport const Text = styled.p`\n  color: ${props => props.theme.colors.greyText};\n`\nexport const Link = styled(NavLink)`\n  color: ${props => props.theme.colors.blue};\n  text-decoration: underline;\n`","import { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { signIn } from '../../redux/auth/authOperations';\nimport { ICredentials } from '../../helpers/interfaces/auth/authInterfaces';\nimport * as SC from './LoginForm.styled';\nimport { useInput } from '../../hooks/useInput';\nimport { FcGoogle } from 'react-icons/fc'\nimport { HiEye, HiEyeOff } from 'react-icons/hi'\nimport { useState } from 'react';\n\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch<ThunkDispatch<any, any, AnyAction>>();\n  const { t } = useTranslation();\n  const[passwordType, setPasswordType] = useState('password')\n\n  const email = useInput('', { isEmail: true });\n  const password = useInput('', { isPassword: true });\n\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    const form = evt.currentTarget as HTMLFormElement;\n    const emailInput = form.elements.namedItem('email') as HTMLInputElement;\n    const passwordInput = form.elements.namedItem(\n      'password'\n    ) as HTMLInputElement;\n    const payload: ICredentials = {\n      email: emailInput.value.toLowerCase(),\n      password: passwordInput.value,\n    };\n    dispatch(signIn(payload));\n    form.reset();\n  };\n  return (\n    <SC.InnerDiv>\n      <SC.Title>{t('Login')}</SC.Title>\n      <SC.Google href=\"https://your-pets.onrender.com/api/users/google\"> <FcGoogle style={{width: \"1.5em\", height: \"1.5em\" }}/></SC.Google>  \n      <SC.Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <SC.Div>\n          <SC.Input\n            style={{\n              border:\n                ((email.isDirty &&\n                  !email.emailError &&\n                  '1px solid green') as string) ||\n                ((email.isDirty &&\n                  email.emailError &&\n                  '1px solid red') as string),\n            }}\n            onChange={e => email.onChange(e)}\n            onBlur={e => email.onBlur(e)}\n            type=\"email\"\n            value={email.value}\n            name=\"email\"\n            placeholder={t('Example@gmail.com')!}\n            required\n          />\n          {(email.isDirty && email.emailError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter a valid Email')}\n            </SC.Notification>\n          )) ||\n            (email.isDirty && !email.emailError && (\n              <SC.Notification style={{ color: 'green' }}>\n                {t('Email is correct')}\n              </SC.Notification>\n            ))}\n        </SC.Div>\n        <SC.Div>\n          <SC.Input\n            style={{\n              border:\n                ((password.isDirty &&\n                  password.passwordError &&\n                  '1px solid red') as string) ||\n                ((password.isDirty &&\n                  !password.passwordError &&\n                  '1px solid green') as string),\n            }}\n            onChange={e => password.onChange(e)}\n            onBlur={e => password.onBlur(e)}\n            type={passwordType}\n            value={password.value}\n            name=\"password\"\n            placeholder={t('Password')!}\n            required\n          />\n          {password.isDirty && password.passwordError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter a valid Password')}\n            </SC.Notification>\n          )}\n          {password.isDirty && !password.passwordError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('Password is correct')}\n            </SC.Notification>\n          )}\n          <SC.Eye onClick={() => {passwordType === 'password' ? setPasswordType('text') : setPasswordType('password')}}>{passwordType === 'password' ? <HiEye/> : <HiEyeOff/>}</SC.Eye>\n        </SC.Div>\n        <SC.Button type=\"submit\">{t('Login')}</SC.Button>\n      </SC.Form>\n      <SC.Text>\n        {t(\"Don't have an account\")}?{' '}\n        <SC.Link to=\"/registration\">{t('Register')}</SC.Link>\n      </SC.Text>\n    </SC.InnerDiv>\n  );\n};\n","import styled from 'styled-components';\n\nimport loginBGM from '../../helpers/photos/authBgM.png';\nimport loginBgT from '../../helpers/photos/authBgT.png';\nimport loginBgD from '../../helpers/photos/authBgD.png';\n\nexport const Main = styled.div`\n height: 100%;\n display:flex;\n justify-content:center;\n align-items:center;\n  @media screen and (max-width: 767px) {\n    height: 600px;\n    background: url(${loginBGM});\n    background-size: 500px auto;\n    background-position: bottom -50px left 0px;\n    background-repeat: no-repeat;\n  }\n  @media screen and (min-width: 768px) and (max-width: 1279px) {\n    height: 1100px;\n    background: url(${loginBgT});\n    background-size: 768px auto;\n    background-position: bottom 0px left 0px;\n    background-repeat: no-repeat;\n  }\n  @media screen and (min-width: 1280px) {\n    height: 100vh;\n    background-image: url(${loginBgD});\n    background-position: bottom 0px left 0px;\n    background-size: 1240px, contain;\n    background-repeat: no-repeat;\n  }\n\n\n`","import { LoginForm } from '../../components/LoginForm/LoginForm';\nimport * as SC from './LoginPage.styled';\n\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\nimport { useGetSearchParams } from '../../hooks/useGetSearchParams';\nimport { useDispatch } from 'react-redux';\nimport { signInWhithToken } from '../../redux/auth/authOperations';\n\nexport const LoginPage = () => {\n  const { token } = useGetSearchParams();\n  const dispatch = useDispatch<ThunkDispatch<any, any, AnyAction>>();\n  if (token) {\n    dispatch(signInWhithToken({ token }));\n  }\n\n  return (\n    <SC.Main>\n      <LoginForm />\n    </SC.Main>\n  );\n};\n"],"names":["Input","styled","Button","InnerDiv","Form","Title","Div","Notification","Google","Eye","Text","props","theme","colors","greyText","Link","NavLink","blue","LoginForm","dispatch","useDispatch","t","useTranslation","useState","passwordType","setPasswordType","email","useInput","isEmail","password","isPassword","href","style","width","height","onSubmit","evt","preventDefault","form","currentTarget","emailInput","elements","namedItem","passwordInput","payload","value","toLowerCase","signIn","reset","autoComplete","border","isDirty","emailError","onChange","e","onBlur","type","name","placeholder","required","color","passwordError","onClick","to","Main","loginBGM","loginBgT","loginBgD","LoginPage","token","useGetSearchParams","signInWhithToken"],"sourceRoot":""}