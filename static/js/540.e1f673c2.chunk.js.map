{"version":3,"file":"static/js/540.e1f673c2.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm1/RegisterForm1.tsx","components/RegisterForm/RegisterForm2/RegisterForm2.tsx","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import { useState, useEffect, ChangeEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink } from 'react-router-dom';\nimport { IFormOneData } from '../../../pages/RegisterPage/RegisterPage';\n\ninterface IProps {\n  onToggle: () => void;\n  getData: (data: IFormOneData) => void;\n}\n\nexport const RegisterForm1 = ({ onToggle, getData }: IProps) => {\n  const [formValid, setFormValid] = useState(false);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (password === confirmPassword && password !== '') {\n      setFormValid(true);\n    } else {\n      setFormValid(false);\n    }\n  }, [confirmPassword, password]);\n\n  const inputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'password':\n        setPassword(value);\n        break;\n\n      case 'confirmPassword':\n        setConfirmPassword(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onNextForm = () => {\n    getData({ email, password });\n    onToggle();\n  };\n\n  return (\n    <>\n      <h2>{t('Registration')}</h2>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={inputChange}\n        name=\"email\"\n        placeholder={t('Email')!}\n        required\n      />\n\n      <input\n        type=\"password\"\n        value={password}\n        onChange={inputChange}\n        name=\"password\"\n        placeholder={t('Password')!}\n        required\n        minLength={6}\n      />\n\n      <input\n        type=\"password\"\n        value={confirmPassword}\n        onChange={inputChange}\n        name=\"confirmPassword\"\n        placeholder={t('Confirm Password')!}\n        required\n        minLength={6}\n      />\n\n      <button\n        disabled={!formValid || password.length <= 5}\n        type=\"button\"\n        onClick={onNextForm}\n      >\n        {t('Next')}\n      </button>\n      <p>\n        {t('Already have an account')}?\n        <NavLink to=\"/login\">{t('Login')}</NavLink>\n      </p>\n    </>\n  );\n};\n","import { FormEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@reduxjs/toolkit';\nimport { AnyAction } from 'redux';\nimport { NavLink } from 'react-router-dom';\nimport { signUp } from '../../../redux/auth/authOperations';\nimport { useTranslation } from 'react-i18next';\nimport { IFormOneData } from '../../../pages/RegisterPage/RegisterPage';\nimport { ICredentials } from '../../../helpers/interfaces/auth/authInterfaces';\n\ninterface IProps {\n  onToggle: () => void;\n  dataForm1: IFormOneData | {};\n}\n\nexport const RegisterForm2 = ({ onToggle, dataForm1 }: IProps) => {\n  const dispatch = useDispatch<ThunkDispatch<any, any, AnyAction>>();\n  const { t } = useTranslation();\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    const name = (form.elements.namedItem('name') as HTMLInputElement).value;\n    const city = (form.elements.namedItem('city') as HTMLInputElement).value;\n    const phone = (form.elements.namedItem('phone') as HTMLInputElement).value;\n\n    const payload: ICredentials = {\n      ...(dataForm1 as {\n        email: string;\n        password: string;\n      }),\n      name,\n      city,\n      phone,\n    };\n\n    dispatch(signUp(payload));\n    form.reset();\n  };\n\n  return (\n    <>\n      <h2>{t('Registration')}</h2>\n      <form onSubmit={onSubmit} autoComplete=\"off\">\n        <input\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          placeholder={t('Name')!}\n          required\n        />\n\n        <input\n          id=\"city\"\n          type=\"text\"\n          name=\"city\"\n          placeholder={t('City, Region')!}\n          required\n        />\n\n        <input\n          id=\"phone\"\n          type=\"tel\"\n          name=\"phone\"\n          placeholder={t('Mobile Phone')!}\n          required\n        />\n\n        <button type=\"submit\">{t('Registration')}</button>\n        <button onClick={onToggle} type=\"button\">\n          {t('Back')}\n        </button>\n      </form>\n      <p>\n        {t('Already have an account')}?\n        <NavLink to=\"/login\">{t('Login')}</NavLink>\n      </p>\n    </>\n  );\n};\n","import { RegisterForm1 } from '../../components/RegisterForm/RegisterForm1/RegisterForm1';\nimport { RegisterForm2 } from '../../components/RegisterForm/RegisterForm2/RegisterForm2';\nimport { useState } from 'react';\n\nexport interface IFormOneData {\n  email: string;\n  password: string;\n}\n\nexport const RegisterPage = () => {\n  const [Step1, setStep1] = useState<boolean>(true);\n  const [dataForm1, setDataForm1] = useState<IFormOneData | {}>({});\n\n  const toggleForm = () => {\n    setStep1(!Step1);\n  };\n\n  const getDataForm1 = (data: IFormOneData) => {\n    setDataForm1(data);\n  };\n  return (\n    <>\n      {Step1 ? (\n        <RegisterForm1 getData={getDataForm1} onToggle={toggleForm} />\n      ) : (\n        <RegisterForm2 dataForm1={dataForm1} onToggle={toggleForm} />\n      )}\n    </>\n  );\n};\n"],"names":["RegisterForm1","onToggle","getData","useState","formValid","setFormValid","password","setPassword","confirmPassword","setConfirmPassword","email","setEmail","t","useTranslation","useEffect","inputChange","e","currentTarget","name","value","type","onChange","placeholder","required","minLength","disabled","length","onClick","to","RegisterForm2","dataForm1","dispatch","useDispatch","onSubmit","event","preventDefault","form","elements","namedItem","city","phone","payload","signUp","reset","autoComplete","id","RegisterPage","Step1","setStep1","setDataForm1","toggleForm","data"],"sourceRoot":""}